import microcontroller
from typing import Any

"""
bitbangio
"""


# shared-bindings/bitbangio/OneWire.c:47
class OneWire:
    def __init__(self, pin: microcontroller.Pin): ...
    def deinit(self, ) -> Any: ...
    def __enter__(self, ) -> Any: ...
    def __exit__(self, ) -> Any: ...
    def reset(self, ) -> Any: ...
    def read_bit(self, ) -> Any: ...
    def write_bit(self, value: Any) -> Any: ...

# shared-bindings/bitbangio/SPI.c:55
class SPI:
    def __init__(self, clock: microcontroller.Pin, MOSI: microcontroller.Pin = None, MISO: microcontroller.Pin = None): ...
    def deinit(self, ) -> Any: ...
    def __enter__(self, ) -> Any: ...
    def __exit__(self, ) -> Any: ...
    def configure(self, *, baudrate: int = 100000, polarity: int = 0, phase: int = 0, bits: int = 8) -> Any: ...
    def try_lock(self, ) -> Any: ...
    def unlock(self, ) -> Any: ...
    def write(self, buf: Any) -> Any: ...
    def readinto(self, buf: Any) -> Any: ...
    def write_readinto(self, buffer_out: bytearray, buffer_in: bytearray, *, out_start: Any = 0, out_end: int = None, in_start: Any = 0, in_end: int = None) -> Any: ...

# shared-bindings/bitbangio/I2C.c:45
class I2C:
    def __init__(self, scl: microcontroller.Pin, sda: microcontroller.Pin, *, frequency: int = 400000, timeout: int): ...
    def deinit(self, ) -> Any: ...
    def __enter__(self, ) -> Any: ...
    def __exit__(self, ) -> Any: ...
    def scan(self, ) -> Any: ...
    def try_lock(self, ) -> Any: ...
    def unlock(self, ) -> Any: ...
    def readfrom_into(self, address: int, buffer: bytearray, *, start: int = 0, end: int = None) -> Any: ...
    def writeto(self, address: int, buffer: bytearray, *, start: int = 0, end: int = None, stop: bool = True) -> Any: ...
    def writeto_then_readfrom(self, address: int, out_buffer: bytearray, in_buffer: bytearray, *, out_start: int = 0, out_end: int = None, in_start: int = 0, in_end: int = None) -> Any: ...
