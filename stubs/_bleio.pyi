import Address
import Characteristic
import Service
import UUID
import buf
import float/int
import iterable
import sequence
from typing import Any

"""
_bleio
"""


# shared-bindings/_bleio/PacketBuffer.c:51
class PacketBuffer:
    def __init__(self, characteristic: Characteristic, *, buffer_size: int): ...
    def readinto(self, buf: Any) -> Any: ...
    def write(self, data: Any, *, header: Any = None) -> Any: ...
    def deinit(self, ) -> Any: ...
    packet_size: Any = ...

# shared-bindings/_bleio/CharacteristicBuffer.c:51
class CharacteristicBuffer:
    def __init__(self, characteristic: Characteristic, *, timeout: int = 1, buffer_size: int = 64): ...
    def read(self, nbytes: Any = None) -> Any: ...
    def readinto(self, buf: Any) -> Any: ...
    def readline(self, ) -> Any: ...
    in_waiting: Any = ...
    def reset_input_buffer(self, ) -> Any: ...
    def deinit(self, ) -> Any: ...

# shared-bindings/_bleio/ScanResults.c:53
class ScanResults:
    def __init__(self, ): ...
    def __iter__(self, ) -> Any: ...
    def __next__(self, ) -> Any: ...

# shared-bindings/_bleio/Attribute.c:44
class Attribute:
    def __init__(self, ): ...
    NO_ACCESS: Any = ...
    OPEN: Any = ...
    ENCRYPT_NO_MITM: Any = ...
    ENCRYPT_WITH_MITM: Any = ...
    LESC_ENCRYPT_WITH_MITM: Any = ...
    SIGNED_NO_MITM: Any = ...
    SIGNED_WITH_MITM: Any = ...
    adapter: Any = ...

# shared-bindings/_bleio/__init__.c:85
class BluetoothError:
    def __init__(self, Exception: Any): ...

# shared-bindings/_bleio/__init__.c:99
class ConnectionError:
    def __init__(self, BluetoothError: Any): ...

# shared-bindings/_bleio/__init__.c:112
class RoleError:
    def __init__(self, BluetoothError: Any): ...

# shared-bindings/_bleio/__init__.c:122
class SecurityError:
    def __init__(self, BluetoothError: Any): ...

# shared-bindings/_bleio/Connection.c:75
class Connection:
    def __init__(self, ): ...
    def disconnect(self, ) -> Any: ...
    def pair(self, *, bond: Any = True) -> Any: ...
    def discover_remote_services(self, service_uuids_whitelist: iterable = None) -> Any: ...
    connected: Any = ...
    paired: Any = ...
    connection_interval: Any = ...

# shared-bindings/_bleio/Service.c:42
class Service:
    def __init__(self, uuid: UUID, *, secondary: bool = False): ...
    characteristics: Any = ...
    remote: Any = ...
    secondary: Any = ...
    uuid: Any = ...

# shared-bindings/_bleio/UUID.c:44
class UUID:
    def __init__(self, value: Any): ...
    uuid16: Any = ...
    uuid128: Any = ...
    size: Any = ...
    def pack_into(self, buffer: Any, offset: Any = 0) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...

# shared-bindings/_bleio/ScanEntry.c:48
class ScanEntry:
    def __init__(self, ): ...
    def matches(self, prefixes: Any, *, all: Any = True) -> Any: ...
    address: Any = ...
    advertisement_bytes: Any = ...
    rssi: Any = ...
    connectable: Any = ...
    scan_response: Any = ...

# shared-bindings/_bleio/Descriptor.c:45
class Descriptor:
    def __init__(self, ): ...
    uuid: Any = ...
    characteristic (read-only): Any = ...
    value: Any = ...

# shared-bindings/_bleio/Address.c:45
class Address:
    def __init__(self, address: buf, address_type: Any): ...
    address_bytes: Any = ...
    type: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self, ) -> Any: ...
    PUBLIC: Any = ...
    RANDOM_STATIC: Any = ...
    RANDOM_PRIVATE_RESOLVABLE: Any = ...
    RANDOM_PRIVATE_NON_RESOLVABLE: Any = ...

# shared-bindings/_bleio/Adapter.c:70
class Adapter:
    def __init__(self, ): ...
    enabled: Any = ...
    address: Any = ...
    name: Any = ...
    def start_advertising(self, data: buf, *, scan_response: buf = None, connectable: bool = True, interval: float = 0.1) -> Any: ...
    def stop_advertising(self, ) -> Any: ...
    def start_scan(self, prefixes: sequence = b"", \*: Any, buffer_size: int = 512, extended: bool = False, timeout: float = None, interval: float = 0.1, window: float = 0.1, minimum_rssi: int = -80, active: bool = True) -> Any: ...
    def stop_scan(self, ) -> Any: ...
    connected: Any = ...
    connections: Any = ...
    def connect(self, address: Address, *, timeout: float/int) -> Any: ...
    def erase_bonding(self, ) -> Any: ...

# shared-bindings/_bleio/Characteristic.c:44
class Characteristic:
    def __init__(self, ): ...
    def add_to_service(self, service: Service, uuid: UUID, *, properties: int = 0, read_perm: int = Attribute.OPEN, write_perm: int = Attribute.OPEN, max_length: int = 20, fixed_length: bool = False, initial_value: buf = None) -> Any: ...
    properties: Any = ...
    uuid: Any = ...
    value: Any = ...
    descriptors: Any = ...
    service (read-only): Any = ...
    def set_cccd(self, *, notify: bool = False, indicate: float = False) -> Any: ...
    BROADCAST: Any = ...
    INDICATE: Any = ...
    NOTIFY: Any = ...
    READ: Any = ...
    WRITE: Any = ...
    WRITE_NO_RESPONSE: Any = ...
