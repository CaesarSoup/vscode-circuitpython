import Group
import buffer
import busio
import displayio
import file
import microcontroller
from typing import Any

"""
displayio
"""


# shared-bindings/displayio/Group.c:45
class Group:
    def __init__(self, *, max_size: int = 4, scale: int = 1, x: int = 0, y: int = 0): ...
    hidden: Any = ...
    scale: Any = ...
    x: Any = ...
    y: Any = ...
    def append(self, layer: Any) -> Any: ...
    def insert(self, index: Any, layer: Any) -> Any: ...
    def index(self, layer: Any) -> Any: ...
    def pop(self, i: Any = -1) -> Any: ...
    def remove(self, layer: Any) -> Any: ...
    def __len__(self, ) -> Any: ...
    def __getitem__(self, index: Any) -> Any: ...
    def __setitem__(self, index: Any, value: Any) -> Any: ...
    def __delitem__(self, index: Any) -> Any: ...

# shared-bindings/displayio/I2CDisplay.c:49
class I2CDisplay:
    def __init__(self, i2c_bus: busio.I2C, *, device_address: int, reset: microcontroller.Pin = None): ...
    def reset(self, ) -> Any: ...
    def send(self, command: Any, data: Any) -> Any: ...

# shared-bindings/displayio/Palette.c:47
class Palette:
    def __init__(self, color_count: int): ...
    def __len__(self, ) -> Any: ...
    def __setitem__(self, index: Any, value: Any) -> Any: ...
    def make_transparent(self, palette_index: Any) -> Any: ...
    def make_opaque(self, palette_index: Any) -> Any: ...

# shared-bindings/displayio/Display.c:54
class Display:
    def __init__(self, display_bus: Any, init_sequence: buffer, *, width: int, height: int, colstart: int = 0, rowstart: int = 0, rotation: int = 0, color_depth: int = 16, grayscale: bool = False, pixels_in_byte_share_row: bool = True, bytes_per_cell: int = 1, reverse_pixels_in_byte: bool = False, set_column_command: int = 0x2a, set_row_command: int = 0x2b, write_ram_command: int = 0x2c, set_vertical_scroll: int = 0, backlight_pin: microcontroller.Pin = None, brightness_command: int = None, brightness: bool = 1.0, auto_brightness: bool = False, single_byte_bounds: bool = False, data_as_commands: bool = False, auto_refresh: bool = True, native_frames_per_second: int = 60): ...
    def show(self, group: Group) -> Any: ...
    def refresh(self, *, target_frames_per_second: int = 60, minimum_frames_per_second: int = 1) -> Any: ...
    auto_refresh: Any = ...
    brightness: Any = ...
    auto_brightness: Any = ...
    width: Any = ...
    height: Any = ...
    rotation: Any = ...
    bus: Any = ...
    def fill_row(self, y: int, buffer: bytearray) -> Any: ...

# shared-bindings/displayio/OnDiskBitmap.c:76
class OnDiskBitmap:
    def __init__(self, file: file): ...
    width: Any = ...
    height: Any = ...

# shared-bindings/displayio/ParallelBus.c:49
class ParallelBus:
    def __init__(self, *, data0: microcontroller.Pin, command: microcontroller.Pin, chip_select: microcontroller.Pin, write: microcontroller.Pin, read: microcontroller.Pin, reset: microcontroller.Pin): ...
    def reset(self, ) -> Any: ...
    def send(self, command: Any, data: Any) -> Any: ...

# shared-bindings/displayio/Bitmap.c:46
class Bitmap:
    def __init__(self, width: int, height: int, value_count: int): ...
    width: Any = ...
    height: Any = ...
    def __getitem__(self, index: Any) -> Any: ...
    def __setitem__(self, index: Any, value: Any) -> Any: ...

# shared-bindings/displayio/TileGrid.c:53
class TileGrid:
    def __init__(self, bitmap: displayio.Bitmap, *, pixel_shader: displayio.Palette, width: int = 1, height: int = 1, tile_width: int = None, tile_height: int = None, default_tile: int = 0, x: int = 0, y: int = 0): ...
    hidden: Any = ...
    x: Any = ...
    y: Any = ...
    flip_x: Any = ...
    flip_y: Any = ...
    transpose_xy: Any = ...
    pixel_shader: Any = ...
    def __getitem__(self, index: Any) -> Any: ...
    def __setitem__(self, index: Any, tile_index: Any) -> Any: ...

# shared-bindings/displayio/__init__.c:76
def release_displays() -> Any: ...

# shared-bindings/displayio/ColorConverter.c:46
class ColorConverter:
    def __init__(self, *, dither: bool = False): ...
    def convert(self, color: Any) -> Any: ...
    dither: Any = ...

# shared-bindings/displayio/FourWire.c:49
class FourWire:
    def __init__(self, spi_bus: busio.SPI, *, command: microcontroller.Pin, chip_select: microcontroller.Pin, reset: microcontroller.Pin = None, baudrate: int = 24000000): ...
    def reset(self, ) -> Any: ...
    def send(self, command: Any, data: Any, *, toggle_every_byte: Any = False) -> Any: ...

# shared-bindings/displayio/EPaperDisplay.c:54
class EPaperDisplay:
    def __init__(self, display_bus: Any, start_sequence: buffer, stop_sequence: buffer, *, width: int, height: int, ram_width: int, ram_height: int, colstart: int = 0, rowstart: int = 0, rotation: int = 0, set_column_window_command: int = None, set_row_window_command: int = None, single_byte_bounds: Any = False, write_black_ram_command: int, black_bits_inverted: bool = False, write_color_ram_command: int = None, color_bits_inverted: bool = False, highlight_color: int = 0x000000, refresh_display_command: int, refresh_time: float = 40, busy_pin: microcontroller.Pin = None, busy_state: bool = True, seconds_per_frame: float = 180, always_toggle_chip_select: bool = False): ...
    def show(self, group: Group) -> Any: ...
    def refresh(self, ) -> Any: ...
    time_to_refresh: Any = ...
    width: Any = ...
    height: Any = ...
    bus: Any = ...

# shared-bindings/displayio/Shape.c:44
class Shape:
    def __init__(self, width: int, height: int, *, mirror_x: bool = False, mirror_y: bool = False): ...
    def set_boundary(self, y: Any, start_x: Any, end_x: Any) -> Any: ...
